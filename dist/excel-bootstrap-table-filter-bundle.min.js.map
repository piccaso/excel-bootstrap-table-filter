{"version":3,"sources":["../src/Debounce.ts","../src/FilterMenu.ts","../src/FilterCollection.ts","../src/excel-bootstrap-table-filter.ts"],"names":["fn","ms","timeoutId","args","setTimeout","apply","_this","target","th","column","index","options","filterCollection","tds","find","this","toArray","menu","dropdownFilterDropdown","appendChild","$trigger","$","children","$content","$menu","updateContent","newEl","oldEl","replaceChild","bind","debounced","debounce","eventHandler","refresh","setAttribute","addEventListener","autoUpdate","forEach","el","click","toggle","document","is","has","length","hide","value","selectAllCheckbox","HTMLInputElement","checked","toggleAll","inputs","filter","input","toLowerCase","indexOf","searchFilter","val","i","td","self","innerText","dropdownFilterItem","createElement","className","type","trim","replace","toString","innerHTML","captions","select_all","dropdownFilterItemSelectAll","search","direction","span","split","join","dropdownFilterContent","classList","add","stringFound","count","innerDivs","reduce","arr","elt","undefined","elc","cloneNode","push","map","v","String","str","nr","Number","isNaN","sort","a","b","_this2","div","firstElementChild","selectAllCheckboxDiv","unshift","searchFilterDiv","dropdownFilterSearch","outerDiv","innerDiv","elements","concat","dropdownFilterSort","a_to_z","z_to_a","html","arrow","icon","hasClass","remove","ths","columnSelector","filterMenus","FilterMenu","rows","table","get","tbody","filterMenu","initialize","bindAutoUpdate","bindCheckboxes","bindSelectAllCheckboxes","bindSort","bindSearch","removeClass","observer","MutationObserver","mut","targets","reloadAll","Symbol","iterator","_step","_iteratorNormalCompletion","_iterator","next","done","m","nodeName","parentNode","removedNodes","Array","from","rn","hasChildNodes","toConsumableArray","event","CustomEvent","t","dispatchEvent","config","attributes","childList","subtree","characterData","observe","querySelector","updateRowVisibility","change","data","updateSelectAll","selectAllUpdate","$sortElement","order","attr","handler","$input","searchToggle","debouncedHandler","keyup","showRows","hideRows","selectedLists","Set","found","j","content","selected","show","flip","querySelectorAll","excelTableFilter","extend","FilterCollection"],"mappings":"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","file":"dist/excel-bootstrap-table-filter-bundle.min.js","sourcesContent":["export default function debounce(fn: Function, ms = 600): Function {\n    let timeoutId: number;\n    return function (this: any, ...args: any[]) {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => fn.apply(this, args), ms);\n    };\n}","import { FilterCollection } from './FilterCollection'\nimport debounce from './Debounce'\n\nexport class FilterMenu {\n\n  th:                 Element;\n  tds:                Array<Element>;\n  column:             number;\n  index:              number;\n  menu:               HTMLElement;\n  inputs:             Array<Element>;\n  selectAllCheckbox:  Element;\n  searchFilter:       Element;\n  options:            Options;\n  target:             JQuery;\n  filterCollection:   FilterCollection;\n\n  constructor (target: JQuery, th: Element, column: number, index: number, options: Options, filterCollection: FilterCollection) {\n    this.options = options;\n    this.th = th;\n    this.column = column;\n    this.index = index;\n    this.tds = target.find('tbody tr td:nth-child(' + (this.column + 1) + ')').toArray();\n    this.filterCollection = filterCollection;\n  }\n\n  public initialize(): void {\n    this.menu = this.dropdownFilterDropdown();\n    this.th.appendChild(this.menu);\n\n    // variables for click handlers\n    let $trigger = $(this.menu.children[0]);\n    let $content = $(this.menu.children[1]);\n    let $menu = $(this.menu);\n\n    const updateContent = () => {\n      const newEl = this.dropdownFilterDropdown().children[1];\n      const oldEl = this.menu.children[1];\n      this.menu.replaceChild(newEl, oldEl);\n      $content = $(this.menu.children[1]);\n      this.filterCollection.bind();\n    };\n    const debounced = debounce(updateContent, 50);\n    const eventHandler = ()=>{\n      debounced();\n    };\n\n    const refresh = \"refresh\";\n    this.th.setAttribute('hasRefresh','hasRefresh');\n    this.th.addEventListener(refresh, eventHandler);\n    if(this.options.autoUpdate) {\n      this.tds.forEach(el => el.addEventListener(refresh, eventHandler));\n    }\n    \n    // toggle hide/show when the trigger is clicked\n    $trigger.click(() => $content.toggle());\n\n    $(document).click(function(el) {\n      // hide the content if the user clicks outside of the menu\n      if (!$menu.is(el.target) && $menu.has(el.target).length === 0) {\n        $content.hide();\n      }\n    });\n  }\n\n  public searchToggle(value: string): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = false;\n    if (value.length === 0){\n      this.toggleAll(true);\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = true;\n      return;\n    }\n    // deselect all checkboxes initially\n    this.toggleAll(false);\n    // select checkboxes that match the search parameter\n    this.inputs.filter(function(input: HTMLInputElement) {\n      return input.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\n    }).forEach(function(input: HTMLInputElement) {\n      input.checked = true;\n    });\n  }\n\n\n  public updateSelectAll(): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) {\n      // clear search parameters, if any\n      $(this.searchFilter).val('');\n      // Check if all inputs are selected\n      this.selectAllCheckbox.checked = (this.inputs.length === this.inputs.filter(function(input: HTMLInputElement) {\n        return input.checked;\n      }).length);\n    }\n  }\n\n  public selectAllUpdate(checked: boolean): void {\n    // clear search parameters, if any\n    $(this.searchFilter).val('');\n    this.toggleAll(checked);\n  }\n\n  private toggleAll(checked: boolean): void {\n    // loop through all inputs and check or uncheck each\n    for (var i=0; i < this.inputs.length; i++) {\n      let input = this.inputs[i];\n      if (input instanceof HTMLInputElement) input.checked = checked;\n    }\n  }\n\n  private dropdownFilterItem(td: HTMLElement, self: any): HTMLElement {\n    // build holder div\n    let value = td.innerText;\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = value.trim().replace(/ *$/g,'');\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item item';\n    // get index of td element\n    input.setAttribute('data-column', self.column.toString());\n    input.setAttribute('data-index', self.index.toString());\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    dropdownFilterItem.innerHTML = dropdownFilterItem.innerHTML.trim() + ' ' +  value;\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterItemSelectAll(): HTMLElement {\n    // build holder div\n    let value = this.options.captions.select_all;\n    let dropdownFilterItemSelectAll = document.createElement('div');\n    dropdownFilterItemSelectAll.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = this.options.captions.select_all;\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item select-all';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    // append input to holding div\n    dropdownFilterItemSelectAll.appendChild(input);\n    dropdownFilterItemSelectAll.innerHTML = dropdownFilterItemSelectAll.innerHTML + ' ' +  value;\n    return dropdownFilterItemSelectAll;\n  }\n\n  private dropdownFilterSearch(): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-search';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'text';\n    input.className = 'dropdown-filter-menu-search form-control';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    input.setAttribute('placeholder', this.options.captions.search);\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterSort(direction: string): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-sort';\n    // build span\n    let span = document.createElement('span');\n    span.className = direction.toLowerCase().split(' ').join('-');\n    span.setAttribute('data-column', this.column.toString());\n    span.setAttribute('data-index', this.index.toString());\n    span.innerText = direction;\n    // append input to holding div\n    dropdownFilterItem.appendChild(span);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterContent(): HTMLElement {\n    let self = this;\n    // build holder div\n    let dropdownFilterContent = document.createElement('div');\n    dropdownFilterContent.classList.add('dropdown-filter-content', 'needs-binding');\n    let stringFound = false;\n    let count : {[element : string] : number} = {};\n    let innerDivs = this.tds.reduce(function(arr, el: HTMLElement) {\n      // get unique values in column\n      let elt = el.innerText.trim()\n      if (count[elt] === undefined) {\n        let elc = el.cloneNode(true)\n        arr.push(elc);\n        count[elt] = 1\n      } else {\n        count[elt] += 1\n      }\n      // return unique values\n      //console.log(arr)\n      return arr;\n    }, [])\n    .map(function(v) { \n      v.innerText += ' (' + String(count[v.innerText.trim()]) + ')'; \n      const str = v.innerText.toLowerCase();\n      const nr = Number(str);\n      if(!stringFound){\n        if(isNaN(nr)) stringFound=true;\n      }\n\n      return {el:v,str,nr}; \n    })\n    .sort(function(a, b) {\n      if (stringFound) {\n        if(a.str < b.str) return -1;\n        if(a.str > b.str) return  1;\n      } else {\n        if(a.nr < b.nr) return -1;\n        if(a.nr > b.nr) return  1;\n      }\n      return 0;\n    })\n    // create dropdown filter items out of each value\n    .map( (td) => {\n      return this.dropdownFilterItem(td.el, self);\n    })\n\n    // map inputs to instance, we will need these later\n    this.inputs = innerDivs.map((div) => div.firstElementChild);\n\n    // add a select all checkbox\n    let selectAllCheckboxDiv = this.dropdownFilterItemSelectAll();\n    // map the select all  checkbox to the instance, we will need it later\n    this.selectAllCheckbox = selectAllCheckboxDiv.firstElementChild;\n    // the checkbox will precede the other inputs\n    innerDivs.unshift(selectAllCheckboxDiv);\n\n    let searchFilterDiv = this.dropdownFilterSearch();\n    this.searchFilter = searchFilterDiv.firstElementChild;\n\n    // create outer div, and place all inner divs within it\n    let outerDiv = innerDivs.reduce(function(outerDiv, innerDiv) {\n      outerDiv.appendChild(innerDiv);\n      return outerDiv;\n    }, document.createElement('div'));\n    outerDiv.className = 'checkbox-container';\n\n    let elements: Array<HTMLElement> = [];\n    if (this.options.sort  ) elements= elements.concat([\n      this.dropdownFilterSort(this.options.captions.a_to_z),\n      this.dropdownFilterSort(this.options.captions.z_to_a)\n      ]);\n    if (this.options.search) elements.push(searchFilterDiv);\n\n    return elements.concat(outerDiv).reduce(function(html, el) {\n        html.appendChild(el);\n        return html;\n    }, dropdownFilterContent);\n  }\n\n  private dropdownFilterDropdown(): HTMLElement {\n    // build holder div\n    let dropdownFilterDropdown = document.createElement('div');\n    dropdownFilterDropdown.className = 'dropdown-filter-dropdown';\n    let arrow = document.createElement('span');\n    arrow.className = 'glyphicon glyphicon-arrow-down dropdown-filter-icon';\n    let icon = document.createElement('i');\n    icon.className = 'arrow-down';\n    arrow.appendChild(icon);\n    dropdownFilterDropdown.appendChild(arrow);\n    const dropdownFilterContent = this.dropdownFilterContent();\n    dropdownFilterDropdown.appendChild(dropdownFilterContent);\n        \n    if ($(this.th).hasClass('no-sort')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-sort').remove();\n    }\n    if ($(this.th).hasClass('no-filter')) {\n      $(dropdownFilterDropdown).find('.checkbox-container').remove();\n    }\n    if ($(this.th).hasClass('no-search')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-search').remove();\n    }\n    return dropdownFilterDropdown;\n  }\n\n}\n","import { FilterMenu } from './FilterMenu'\nimport debounce from './Debounce'\n\nexport class FilterCollection {\n\n  filterMenus:  Array<FilterMenu>;\n  rows:         Array<Element>;\n  ths:          Array<Element>;\n  table:        Element;\n  tbody:        Element;\n  options:      Options;\n  target:       JQuery;\n\n  constructor (target: JQuery, options: Options) {\n    this.target = target;\n    this.options = options;\n    this.ths = target.find('th' + options.columnSelector).toArray()\n    this.filterMenus = this.ths.map((th: HTMLElement, index: number) => {\n      let column = $(th).index();\n      return new FilterMenu(target, th, column, index, options, this);\n    });\n    this.rows = target.find('tbody').find('tr').toArray();\n    this.table = target.get(0);\n    this.tbody = target.find('tbody').get(0);\n  }\n\n  public initialize(): void {\n    this.filterMenus.forEach(function(filterMenu) {\n      filterMenu.initialize();\n    });\n    this.bind();\n    this.bindAutoUpdate();\n  }\n\n  public bind(): void {\n    this.bindCheckboxes();\n    this.bindSelectAllCheckboxes();\n    this.bindSort();\n    this.bindSearch();\n    this.target.find('.needs-binding').removeClass('needs-binding');\n  }\n\n  private bindAutoUpdate(): void {\n    if(!this.options.autoUpdate) return;\n    const observer = new MutationObserver((mut)=>{\n      let targets: Array<Node> = [];\n      let reloadAll: boolean = false;\n      for (const m of mut) {\n        if(m.target.nodeName.toLowerCase() === 'td') targets.push(m.target);\n        if(m.target.parentNode && m.target.parentNode.nodeName.toLowerCase() === 'td') targets.push(m.target.parentNode);\n        if(m.removedNodes && m.removedNodes.length > 0) Array.from(m.removedNodes).forEach(rn=>{\n          if(!rn.hasChildNodes) return;\n          if(rn.nodeName.toLowerCase() === 'tr') reloadAll = true;\n        });\n      }\n      if(reloadAll) {\n        targets.length = 0;\n        targets.push(...this.ths);\n      } \n      const event = new CustomEvent('refresh');\n      targets.forEach(t=>t.dispatchEvent(event));\n    });\n    const config = { attributes: false, childList: true, subtree: true, characterData: true };\n    observer.observe(this.table.querySelector('tbody'), config);\n  }\n\n  private bindCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-menu-item.item').change(function() {\n      let index = $(this).data('index');\n      filterMenus[index].updateSelectAll();\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSelectAllCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-menu-item.select-all').change(function() {\n      let index = $(this).data('index');\n      let value = this.checked;\n      filterMenus[index].selectAllUpdate(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSort(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let sort = this.sort;\n    let table = this.table;\n    let options = this.options;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-sort').click(function() {\n      let $sortElement = $(this).find('span');\n      let column = $sortElement.data('column');\n      let order = $sortElement.attr('class');\n      sort(column, order, table, options);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSearch(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    const handler = function() {\n      let $input = $(this).find('input');\n      let index = $input.data('index');\n      let value = $input.val();\n      filterMenus[index].searchToggle(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    };\n    const debouncedHandler = debounce(handler);\n    this.target.find('.needs-binding .dropdown-filter-search').keyup(debouncedHandler);\n  }\n\n  private updateRowVisibility(filterMenus: Array<FilterMenu>, rows: Array<Element>, ths: Array<Element>, tbody:Element): void {\n    let showRows = rows;\n    let hideRows: Array<Element> = [];\n    let selectedLists = filterMenus.map(function(filterMenu) {\n      return {\n        column: filterMenu.column,\n        selected: new Set(filterMenu.inputs\n          .filter(function(input: HTMLInputElement) {\n            return input.checked\n          }).map(function(input: HTMLInputElement) {\n            return input.value.trim().replace(/ *\\(\\d+\\)$/g,'');\n          }))\n      };\n    });\n    if (rows.length > 100)\n      $(tbody).hide();\n    for (let i=0; i < rows.length; i++) {\n      let tds = rows[i].children;\n      let found : boolean = true\n      for (let j=0; j < selectedLists.length; j++) {\n        let content = (tds[selectedLists[j].column] as HTMLElement).innerText.trim().replace(/ *$/g,'')\n        if (!selectedLists[j].selected.has(content)) {\n          $(rows[i]).hide();\n          found = false\n          break;\n        }\n      }\n      if (found)\n        $(rows[i]).show();\n    }\n    if (rows.length > 100)\n      $(tbody).show();\n  }\n\n  private sort(column: number, order: string, table: Element, options: Options): void {\n    let flip = 1;\n    if (order === options.captions.z_to_a.toLowerCase().split(' ').join('-')) flip = -1;\n    const tbody = table.querySelector('tbody');\n    let stringFound = false;\n    const rows = Array.from(tbody.querySelectorAll('tr'))\n    .map(el => el as HTMLElement)\n    .map(el => {\n      let str = (el.children[column] as HTMLElement).innerText.toLowerCase();\n      let nr = Number(str);\n      if (!stringFound) {\n        if (isNaN(nr)) stringFound = true;\n      }\n      return { el, nr, str };\n    }).sort((a, b) => {\n      if (stringFound) {\n        if (a.str < b.str) return -1 * flip;\n        if (a.str > b.str) return 1 * flip;\n      } else {\n        if (a.nr < b.nr) return -1 * flip;\n        if (a.nr > b.nr) return 1 * flip;\n      }\n      return 0;\n    });\n\n    for (var i = 0; i < rows.length; i++) {\n      tbody.appendChild(rows[i].el);\n    }\n  }\n\n\n}\n","import $ from 'jquery';\nimport { FilterCollection } from './FilterCollection'\n\n// Define the plugin function on the jQuery extension point.\n($.fn as any).excelTableFilter = function (this: JQuery, options: Options) : JQuery {\n  let target = this;\n  // Merge the global options with the per-call options.\n  options = $.extend({}, ($.fn as any).excelTableFilter.options, options);\n\n  if (typeof options.columnSelector === 'undefined') options.columnSelector = '';\n  if (typeof options.sort === 'undefined') options.sort = true;\n  if (typeof options.search === 'undefined') options.search = true;\n  if (typeof options.autoUpdate === 'undefined') options.autoUpdate = true;\n\n  if (typeof options.captions === 'undefined') options.captions = {\n    a_to_z: 'A to Z',\n    z_to_a: 'Z to A',\n    search: 'Search',\n    select_all: 'Select All'\n  }\n\n  let filterCollection = new FilterCollection(target, options);\n  filterCollection.initialize();\n  \n  // Return the jQuery object for chaining.\n  return target;\n};\n\n// Define the plugin's global default options.\n($.fn as any).excelTableFilter.options = {};\n"]}
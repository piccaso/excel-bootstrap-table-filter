{"version":3,"sources":["../src/FilterMenu.ts","../src/Debounce.ts","../src/FilterCollection.ts","../src/excel-bootstrap-table-filter.ts"],"names":["target","th","column","index","options","filterCollection","tds","find","this","toArray","menu","dropdownFilterDropdown","appendChild","$trigger","$","children","$content","$menu","updateContent","newEl","_this","oldEl","replaceChild","bind","setAttribute","addEventListener","click","toggle","document","el","is","has","length","hide","value","selectAllCheckbox","HTMLInputElement","checked","toggleAll","inputs","filter","input","toLowerCase","indexOf","forEach","searchFilter","val","i","td","self","innerText","dropdownFilterItem","createElement","className","type","trim","replace","toString","innerHTML","captions","select_all","dropdownFilterItemSelectAll","search","direction","span","split","join","dropdownFilterContent","classList","add","stringFound","count","innerDivs","reduce","arr","elt","undefined","elc","cloneNode","push","map","v","String","str","nr","Number","isNaN","sort","a","b","_this2","div","firstElementChild","selectAllCheckboxDiv","unshift","searchFilterDiv","dropdownFilterSearch","outerDiv","innerDiv","elements","concat","dropdownFilterSort","a_to_z","z_to_a","html","arrow","icon","hasClass","remove","fn","ms","timeoutId","args","setTimeout","apply","ths","columnSelector","filterMenus","FilterMenu","rows","table","get","tbody","filterMenu","initialize","bindCheckboxes","bindSelectAllCheckboxes","bindSort","bindSearch","removeClass","updateRowVisibility","change","data","updateSelectAll","selectAllUpdate","$sortElement","order","attr","handler","$input","searchToggle","debouncedHandler","debounce","keyup","showRows","hideRows","selectedLists","Set","found","j","content","selected","show","flip","querySelector","Array","from","querySelectorAll","excelTableFilter","extend","FilterCollection"],"mappings":"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","file":"dist/excel-bootstrap-table-filter-bundle.min.js","sourcesContent":["import { FilterCollection } from './FilterCollection'\nexport class FilterMenu {\n\n  th:                 Element;\n  tds:                Array<Element>;\n  column:             number;\n  index:              number;\n  menu:               HTMLElement;\n  inputs:             Array<Element>;\n  selectAllCheckbox:  Element;\n  searchFilter:       Element;\n  options:            Options;\n  target:             JQuery;\n  filterCollection:   FilterCollection;\n\n  constructor (target: JQuery, th: Element, column: number, index: number, options: Options, filterCollection: FilterCollection) {\n    this.options = options;\n    this.th = th;\n    this.column = column;\n    this.index = index;\n    this.tds = target.find('tbody tr td:nth-child(' + (this.column + 1) + ')').toArray();\n    this.filterCollection = filterCollection;\n  }\n\n  public initialize(): void {\n    this.menu = this.dropdownFilterDropdown();\n    this.th.appendChild(this.menu);\n\n    // variables for click handlers\n    let $trigger = $(this.menu.children[0]);\n    let $content = $(this.menu.children[1]);\n    let $menu = $(this.menu);\n\n    const updateContent = () => {\n      const newEl = this.dropdownFilterDropdown().children[1];\n      const oldEl = this.menu.children[1];\n      this.menu.replaceChild(newEl, oldEl);\n      $content = $(this.menu.children[1]);\n      this.filterCollection.bind();\n    };\n\n    this.th.setAttribute('hasRefresh','hasRefresh');\n    this.th.addEventListener('refresh', updateContent);\n\n    // toggle hide/show when the trigger is clicked\n    $trigger.click(() => $content.toggle());\n\n    $(document).click(function(el) {\n      // hide the content if the user clicks outside of the menu\n      if (!$menu.is(el.target) && $menu.has(el.target).length === 0) {\n        $content.hide();\n      }\n    });\n  }\n\n  public searchToggle(value: string): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = false;\n    if (value.length === 0){\n      this.toggleAll(true);\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = true;\n      return;\n    }\n    // deselect all checkboxes initially\n    this.toggleAll(false);\n    // select checkboxes that match the search parameter\n    this.inputs.filter(function(input: HTMLInputElement) {\n      return input.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\n    }).forEach(function(input: HTMLInputElement) {\n      input.checked = true;\n    });\n  }\n\n\n  public updateSelectAll(): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) {\n      // clear search parameters, if any\n      $(this.searchFilter).val('');\n      // Check if all inputs are selected\n      this.selectAllCheckbox.checked = (this.inputs.length === this.inputs.filter(function(input: HTMLInputElement) {\n        return input.checked;\n      }).length);\n    }\n  }\n\n  public selectAllUpdate(checked: boolean): void {\n    // clear search parameters, if any\n    $(this.searchFilter).val('');\n    this.toggleAll(checked);\n  }\n\n  private toggleAll(checked: boolean): void {\n    // loop through all inputs and check or uncheck each\n    for (var i=0; i < this.inputs.length; i++) {\n      let input = this.inputs[i];\n      if (input instanceof HTMLInputElement) input.checked = checked;\n    }\n  }\n\n  private dropdownFilterItem(td: HTMLElement, self: any): HTMLElement {\n    // build holder div\n    let value = td.innerText;\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = value.trim().replace(/ *$/g,'');\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item item';\n    // get index of td element\n    input.setAttribute('data-column', self.column.toString());\n    input.setAttribute('data-index', self.index.toString());\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    dropdownFilterItem.innerHTML = dropdownFilterItem.innerHTML.trim() + ' ' +  value;\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterItemSelectAll(): HTMLElement {\n    // build holder div\n    let value = this.options.captions.select_all;\n    let dropdownFilterItemSelectAll = document.createElement('div');\n    dropdownFilterItemSelectAll.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = this.options.captions.select_all;\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item select-all';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    // append input to holding div\n    dropdownFilterItemSelectAll.appendChild(input);\n    dropdownFilterItemSelectAll.innerHTML = dropdownFilterItemSelectAll.innerHTML + ' ' +  value;\n    return dropdownFilterItemSelectAll;\n  }\n\n  private dropdownFilterSearch(): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-search';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'text';\n    input.className = 'dropdown-filter-menu-search form-control';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    input.setAttribute('placeholder', this.options.captions.search);\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterSort(direction: string): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-sort';\n    // build span\n    let span = document.createElement('span');\n    span.className = direction.toLowerCase().split(' ').join('-');\n    span.setAttribute('data-column', this.column.toString());\n    span.setAttribute('data-index', this.index.toString());\n    span.innerText = direction;\n    // append input to holding div\n    dropdownFilterItem.appendChild(span);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterContent(): HTMLElement {\n    let self = this;\n    // build holder div\n    let dropdownFilterContent = document.createElement('div');\n    dropdownFilterContent.classList.add('dropdown-filter-content', 'needs-binding');\n    let stringFound = false;\n    let count : {[element : string] : number} = {};\n    let innerDivs = this.tds.reduce(function(arr, el: HTMLElement) {\n      // get unique values in column\n      let elt = el.innerText.trim()\n      if (count[elt] === undefined) {\n        let elc = el.cloneNode(true)\n        arr.push(elc);\n        count[elt] = 1\n      } else {\n        count[elt] += 1\n      }\n      // return unique values\n      //console.log(arr)\n      return arr;\n    }, [])\n    .map(function(v) { \n      v.innerText += ' (' + String(count[v.innerText.trim()]) + ')'; \n      const str = v.innerText.toLowerCase();\n      const nr = Number(str);\n      if(!stringFound){\n        if(isNaN(nr)) stringFound=true;\n      }\n\n      return {el:v,str,nr}; \n    })\n    .sort(function(a, b) {\n      if (stringFound) {\n        if(a.str < b.str) return -1;\n        if(a.str > b.str) return  1;\n      } else {\n        if(a.nr < b.nr) return -1;\n        if(a.nr > b.nr) return  1;\n      }\n      return 0;\n    })\n    // create dropdown filter items out of each value\n    .map( (td) => {\n      return this.dropdownFilterItem(td.el, self);\n    })\n\n    // map inputs to instance, we will need these later\n    this.inputs = innerDivs.map((div) => div.firstElementChild);\n\n    // add a select all checkbox\n    let selectAllCheckboxDiv = this.dropdownFilterItemSelectAll();\n    // map the select all  checkbox to the instance, we will need it later\n    this.selectAllCheckbox = selectAllCheckboxDiv.firstElementChild;\n    // the checkbox will precede the other inputs\n    innerDivs.unshift(selectAllCheckboxDiv);\n\n    let searchFilterDiv = this.dropdownFilterSearch();\n    this.searchFilter = searchFilterDiv.firstElementChild;\n\n    // create outer div, and place all inner divs within it\n    let outerDiv = innerDivs.reduce(function(outerDiv, innerDiv) {\n      outerDiv.appendChild(innerDiv);\n      return outerDiv;\n    }, document.createElement('div'));\n    outerDiv.className = 'checkbox-container';\n\n    let elements: Array<HTMLElement> = [];\n    if (this.options.sort  ) elements= elements.concat([\n      this.dropdownFilterSort(this.options.captions.a_to_z),\n      this.dropdownFilterSort(this.options.captions.z_to_a)\n      ]);\n    if (this.options.search) elements.push(searchFilterDiv);\n\n    return elements.concat(outerDiv).reduce(function(html, el) {\n        html.appendChild(el);\n        return html;\n    }, dropdownFilterContent);\n  }\n\n  private dropdownFilterDropdown(): HTMLElement {\n    // build holder div\n    let dropdownFilterDropdown = document.createElement('div');\n    dropdownFilterDropdown.className = 'dropdown-filter-dropdown';\n    let arrow = document.createElement('span');\n    arrow.className = 'glyphicon glyphicon-arrow-down dropdown-filter-icon';\n    let icon = document.createElement('i');\n    icon.className = 'arrow-down';\n    arrow.appendChild(icon);\n    dropdownFilterDropdown.appendChild(arrow);\n    const dropdownFilterContent = this.dropdownFilterContent();\n    dropdownFilterDropdown.appendChild(dropdownFilterContent);\n        \n    if ($(this.th).hasClass('no-sort')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-sort').remove();\n    }\n    if ($(this.th).hasClass('no-filter')) {\n      $(dropdownFilterDropdown).find('.checkbox-container').remove();\n    }\n    if ($(this.th).hasClass('no-search')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-search').remove();\n    }\n    return dropdownFilterDropdown;\n  }\n\n}\n","export default function debounce(fn: Function, ms = 600): Function {\n    let timeoutId: number;\n    return function (this: any, ...args: any[]) {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => fn.apply(this, args), ms);\n    };\n}","import { FilterMenu } from './FilterMenu'\nimport debounce from './Debounce'\n\nexport class FilterCollection {\n\n  filterMenus:  Array<FilterMenu>;\n  rows:         Array<Element>;\n  ths:          Array<Element>;\n  table:        Element;\n  tbody:        Element;\n  options:      Options;\n  target:       JQuery;\n\n  constructor (target: JQuery, options: Options) {\n    this.target = target;\n    this.options = options;\n    this.ths = target.find('th' + options.columnSelector).toArray()\n    this.filterMenus = this.ths.map((th: HTMLElement, index: number) => {\n      let column = $(th).index();\n      return new FilterMenu(target, th, column, index, options, this);\n    });\n    this.rows = target.find('tbody').find('tr').toArray();\n    this.table = target.get(0);\n    this.tbody = target.find('tbody').get(0);\n  }\n\n  public initialize(): void {\n    this.filterMenus.forEach(function(filterMenu) {\n      filterMenu.initialize();\n    });\n    this.bind();\n  }\n\n  public bind(): void {\n    this.bindCheckboxes();\n    this.bindSelectAllCheckboxes();\n    this.bindSort();\n    this.bindSearch();\n    this.target.find('.needs-binding').removeClass('needs-binding');\n  }\n\n  private bindCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-menu-item.item').change(function() {\n      let index = $(this).data('index');\n      let value = $(this).val();\n      filterMenus[index].updateSelectAll();\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSelectAllCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-menu-item.select-all').change(function() {\n      let index = $(this).data('index');\n      let value = this.checked;\n      filterMenus[index].selectAllUpdate(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSort(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let sort = this.sort;\n    let table = this.table;\n    let options = this.options;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-sort').click(function() {\n      let $sortElement = $(this).find('span');\n      let column = $sortElement.data('column');\n      let order = $sortElement.attr('class');\n      sort(column, order, table, options);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSearch(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    const handler = function() {\n      let $input = $(this).find('input');\n      let index = $input.data('index');\n      let value = $input.val();\n      filterMenus[index].searchToggle(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    };\n    const debouncedHandler = debounce(handler);\n    this.target.find('.needs-binding .dropdown-filter-search').keyup(debouncedHandler);\n  }\n\n  private updateRowVisibility(filterMenus: Array<FilterMenu>, rows: Array<Element>, ths: Array<Element>, tbody:Element): void {\n    let showRows = rows;\n    let hideRows: Array<Element> = [];\n    let selectedLists = filterMenus.map(function(filterMenu) {\n      return {\n        column: filterMenu.column,\n        selected: new Set(filterMenu.inputs\n          .filter(function(input: HTMLInputElement) {\n            return input.checked\n          }).map(function(input: HTMLInputElement) {\n            return input.value.trim().replace(/ *\\(\\d+\\)$/g,'');\n          }))\n      };\n    });\n    if (rows.length > 100)\n      $(tbody).hide();\n    for (let i=0; i < rows.length; i++) {\n      let tds = rows[i].children;\n      let found : boolean = true\n      for (let j=0; j < selectedLists.length; j++) {\n        let content = (tds[selectedLists[j].column] as HTMLElement).innerText.trim().replace(/ *$/g,'')\n        if (!selectedLists[j].selected.has(content)) {\n          $(rows[i]).hide();\n          found = false\n          break;\n        }\n      }\n      if (found)\n        $(rows[i]).show();\n    }\n    if (rows.length > 100)\n      $(tbody).show();\n  }\n\n  private sort(column: number, order: string, table: Element, options: Options): void {\n    let flip = 1;\n    if (order === options.captions.z_to_a.toLowerCase().split(' ').join('-')) flip = -1;\n    const tbody = table.querySelector('tbody');\n    let stringFound = false;\n    const rows = Array.from(tbody.querySelectorAll('tr'))\n    .map(el => el as HTMLElement)\n    .map(el => {\n      let str = (el.children[column] as HTMLElement).innerText.toLowerCase();\n      let nr = Number(str);\n      if (!stringFound) {\n        if (isNaN(nr)) stringFound = true;\n      }\n      return { el, nr, str };\n    }).sort((a, b) => {\n      if (stringFound) {\n        if (a.str < b.str) return -1 * flip;\n        if (a.str > b.str) return 1 * flip;\n      } else {\n        if (a.nr < b.nr) return -1 * flip;\n        if (a.nr > b.nr) return 1 * flip;\n      }\n      return 0;\n    });\n\n    for (var i = 0; i < rows.length; i++) {\n      tbody.appendChild(rows[i].el);\n    }\n  }\n\n\n}\n","import $ from 'jquery';\nimport { FilterCollection } from './FilterCollection'\n\n// Define the plugin function on the jQuery extension point.\n($.fn as any).excelTableFilter = function (this: JQuery, options: Options) {\n  let target = this;\n  // Merge the global options with the per-call options.\n  options = $.extend({}, ($.fn as any).excelTableFilter.options, options);\n\n  if (typeof options.columnSelector === 'undefined') options.columnSelector = '';\n  if (typeof options.sort === 'undefined') options.sort = true;\n  if (typeof options.search === 'undefined') options.search = true;\n\n  if (typeof options.captions === 'undefined') options.captions = {\n    a_to_z: 'A to Z',\n    z_to_a: 'Z to A',\n    search: 'Search',\n    select_all: 'Select All'\n  }\n\n  let filterCollection = new FilterCollection(target, options);\n  filterCollection.initialize();\n\n  // Return the jQuery object for chaining.\n  return target;\n};\n\n// Define the plugin's global default options.\n($.fn as any).excelTableFilter.options = {};\n"]}
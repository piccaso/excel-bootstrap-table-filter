{"version":3,"sources":["../src/FilterMenu.ts","../src/Debounce.ts","../src/FilterCollection.ts","../src/excel-bootstrap-table-filter.ts"],"names":["target","th","column","index","options","tds","find","this","toArray","menu","dropdownFilterDropdown","appendChild","$trigger","$","children","$content","$menu","updateContent","newEl","_this","oldEl","replaceChild","setAttribute","addEventListener","click","toggle","document","el","is","has","length","hide","value","selectAllCheckbox","HTMLInputElement","checked","toggleAll","inputs","filter","input","toLowerCase","indexOf","forEach","searchFilter","val","i","td","self","innerText","dropdownFilterItem","createElement","className","type","trim","replace","toString","innerHTML","captions","select_all","dropdownFilterItemSelectAll","search","direction","span","split","join","dropdownFilterContent","stringFound","count","innerDivs","reduce","arr","elt","undefined","elc","cloneNode","push","map","v","String","str","nr","Number","isNaN","sort","a","b","_this2","div","firstElementChild","selectAllCheckboxDiv","unshift","searchFilterDiv","dropdownFilterSearch","outerDiv","innerDiv","elements","concat","dropdownFilterSort","a_to_z","z_to_a","html","arrow","icon","hasClass","remove","fn","ms","timeoutId","args","setTimeout","apply","ths","columnSelector","filterMenus","FilterMenu","rows","table","get","tbody","filterMenu","initialize","bindCheckboxes","bindSelectAllCheckboxes","bindSort","bindSearch","updateRowVisibility","change","data","updateSelectAll","selectAllUpdate","$sortElement","order","attr","handler","$input","searchToggle","debouncedHandler","debounce","keyup","showRows","hideRows","selectedLists","Set","found","j","content","selected","show","flip","querySelector","Array","from","querySelectorAll","excelTableFilter","extend","filterCollection","FilterCollection"],"mappings":"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","file":"dist/excel-bootstrap-table-filter-bundle.min.js","sourcesContent":["export class FilterMenu {\n\n  th:                 Element;\n  tds:                Array<Element>;\n  column:             number;\n  index:              number;\n  menu:               HTMLElement;\n  inputs:             Array<Element>;\n  selectAllCheckbox:  Element;\n  searchFilter:       Element;\n  options:            Options;\n  target:             JQuery;\n\n  constructor (target: JQuery, th: Element, column: number, index: number, options: Options) {\n    this.options = options;\n    this.th = th;\n    this.column = column;\n    this.index = index;\n    this.tds = target.find('tbody tr td:nth-child(' + (this.column + 1) + ')').toArray();\n  }\n\n  public initialize(): void {\n    this.menu = this.dropdownFilterDropdown();\n    this.th.appendChild(this.menu);\n\n    // variables for click handlers\n    let $trigger = $(this.menu.children[0]);\n    let $content = $(this.menu.children[1]);\n    let $menu = $(this.menu);\n\n    const updateContent = () => {\n      const newEl = this.dropdownFilterDropdown();\n      const oldEl = this.menu.children[1];\n      this.menu.replaceChild(newEl, oldEl);\n      $content = $(this.menu.children[1]);\n    };\n\n    this.th.setAttribute('hasRefresh','hasRefresh');\n    this.th.addEventListener('refresh', updateContent);\n\n    // toggle hide/show when the trigger is clicked\n    $trigger.click(() => $content.toggle());\n\n    $(document).click(function(el) {\n      // hide the content if the user clicks outside of the menu\n      if (!$menu.is(el.target) && $menu.has(el.target).length === 0) {\n        $content.hide();\n      }\n    });\n  }\n\n  public searchToggle(value: string): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = false;\n    if (value.length === 0){\n      this.toggleAll(true);\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = true;\n      return;\n    }\n    // deselect all checkboxes initially\n    this.toggleAll(false);\n    // select checkboxes that match the search parameter\n    this.inputs.filter(function(input: HTMLInputElement) {\n      return input.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\n    }).forEach(function(input: HTMLInputElement) {\n      input.checked = true;\n    });\n  }\n\n\n  public updateSelectAll(): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) {\n      // clear search parameters, if any\n      $(this.searchFilter).val('');\n      // Check if all inputs are selected\n      this.selectAllCheckbox.checked = (this.inputs.length === this.inputs.filter(function(input: HTMLInputElement) {\n        return input.checked;\n      }).length);\n    }\n  }\n\n  public selectAllUpdate(checked: boolean): void {\n    // clear search parameters, if any\n    $(this.searchFilter).val('');\n    this.toggleAll(checked);\n  }\n\n  private toggleAll(checked: boolean): void {\n    // loop through all inputs and check or uncheck each\n    for (var i=0; i < this.inputs.length; i++) {\n      let input = this.inputs[i];\n      if (input instanceof HTMLInputElement) input.checked = checked;\n    }\n  }\n\n  private dropdownFilterItem(td: HTMLElement, self: any): HTMLElement {\n    // build holder div\n    let value = td.innerText;\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = value.trim().replace(/ *$/g,'');\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item item';\n    // get index of td element\n    input.setAttribute('data-column', self.column.toString());\n    input.setAttribute('data-index', self.index.toString());\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    dropdownFilterItem.innerHTML = dropdownFilterItem.innerHTML.trim() + ' ' +  value;\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterItemSelectAll(): HTMLElement {\n    // build holder div\n    let value = this.options.captions.select_all;\n    let dropdownFilterItemSelectAll = document.createElement('div');\n    dropdownFilterItemSelectAll.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = this.options.captions.select_all;\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item select-all';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    // append input to holding div\n    dropdownFilterItemSelectAll.appendChild(input);\n    dropdownFilterItemSelectAll.innerHTML = dropdownFilterItemSelectAll.innerHTML + ' ' +  value;\n    return dropdownFilterItemSelectAll;\n  }\n\n  private dropdownFilterSearch(): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-search';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'text';\n    input.className = 'dropdown-filter-menu-search form-control';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    input.setAttribute('placeholder', this.options.captions.search);\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterSort(direction: string): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-sort';\n    // build span\n    let span = document.createElement('span');\n    span.className = direction.toLowerCase().split(' ').join('-');\n    span.setAttribute('data-column', this.column.toString());\n    span.setAttribute('data-index', this.index.toString());\n    span.innerText = direction;\n    // append input to holding div\n    dropdownFilterItem.appendChild(span);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterContent(): HTMLElement {\n    let self = this;\n    // build holder div\n    let dropdownFilterContent = document.createElement('div');\n    dropdownFilterContent.className = 'dropdown-filter-content';\n    let stringFound = false;\n    let count : {[element : string] : number} = {};\n    let innerDivs = this.tds.reduce(function(arr, el: HTMLElement) {\n      // get unique values in column\n      let elt = el.innerText.trim()\n      if (count[elt] === undefined) {\n        let elc = el.cloneNode(true)\n        arr.push(elc);\n        count[elt] = 1\n      } else {\n        count[elt] += 1\n      }\n      // return unique values\n      //console.log(arr)\n      return arr;\n    }, [])\n    .map(function(v) { \n      v.innerText += ' (' + String(count[v.innerText.trim()]) + ')'; \n      const str = v.innerText.toLowerCase();\n      const nr = Number(str);\n      if(!stringFound){\n        if(isNaN(nr)) stringFound=true;\n      }\n\n      return {el:v,str,nr}; \n    })\n    .sort(function(a, b) {\n      if (stringFound) {\n        if(a.str < b.str) return -1;\n        if(a.str > b.str) return  1;\n      } else {\n        if(a.nr < b.nr) return -1;\n        if(a.nr > b.nr) return  1;\n      }\n      return 0;\n    })\n    // create dropdown filter items out of each value\n    .map( (td) => {\n      return this.dropdownFilterItem(td.el, self);\n    })\n\n    // map inputs to instance, we will need these later\n    this.inputs = innerDivs.map((div) => div.firstElementChild);\n\n    // add a select all checkbox\n    let selectAllCheckboxDiv = this.dropdownFilterItemSelectAll();\n    // map the select all  checkbox to the instance, we will need it later\n    this.selectAllCheckbox = selectAllCheckboxDiv.firstElementChild;\n    // the checkbox will precede the other inputs\n    innerDivs.unshift(selectAllCheckboxDiv);\n\n    let searchFilterDiv = this.dropdownFilterSearch();\n    this.searchFilter = searchFilterDiv.firstElementChild;\n\n    // create outer div, and place all inner divs within it\n    let outerDiv = innerDivs.reduce(function(outerDiv, innerDiv) {\n      outerDiv.appendChild(innerDiv);\n      return outerDiv;\n    }, document.createElement('div'));\n    outerDiv.className = 'checkbox-container';\n\n    let elements: Array<HTMLElement> = [];\n    if (this.options.sort  ) elements= elements.concat([\n      this.dropdownFilterSort(this.options.captions.a_to_z),\n      this.dropdownFilterSort(this.options.captions.z_to_a)\n      ]);\n    if (this.options.search) elements.push(searchFilterDiv);\n\n    return elements.concat(outerDiv).reduce(function(html, el) {\n        html.appendChild(el);\n        return html;\n    }, dropdownFilterContent);\n  }\n\n  private dropdownFilterDropdown(): HTMLElement {\n    // build holder div\n    let dropdownFilterDropdown = document.createElement('div');\n    dropdownFilterDropdown.className = 'dropdown-filter-dropdown';\n    let arrow = document.createElement('span');\n    arrow.className = 'glyphicon glyphicon-arrow-down dropdown-filter-icon';\n    let icon = document.createElement('i');\n    icon.className = 'arrow-down';\n    arrow.appendChild(icon);\n    dropdownFilterDropdown.appendChild(arrow);\n    const dropdownFilterContent = this.dropdownFilterContent();\n    dropdownFilterDropdown.appendChild(dropdownFilterContent);\n        \n    if ($(this.th).hasClass('no-sort')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-sort').remove();\n    }\n    if ($(this.th).hasClass('no-filter')) {\n      $(dropdownFilterDropdown).find('.checkbox-container').remove();\n    }\n    if ($(this.th).hasClass('no-search')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-search').remove();\n    }\n    return dropdownFilterDropdown;\n  }\n\n}\n","export default function debounce(fn: Function, ms = 600): Function {\n    let timeoutId: number;\n    return function (this: any, ...args: any[]) {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => fn.apply(this, args), ms);\n    };\n}","import { FilterMenu } from './FilterMenu'\nimport debounce from './Debounce'\n\nexport class FilterCollection {\n\n  filterMenus:  Array<FilterMenu>;\n  rows:         Array<Element>;\n  ths:          Array<Element>;\n  table:        Element;\n  tbody:        Element;\n  options:      Options;\n  target:       JQuery;\n\n  constructor (target: JQuery, options: Options) {\n    this.target = target;\n    this.options = options;\n    this.ths = target.find('th' + options.columnSelector).toArray()\n    this.filterMenus = this.ths.map(function(th: HTMLElement, index: number) {\n      let column = $(th).index();\n      return new FilterMenu(target, th, column, index, options);\n    });\n    this.rows = target.find('tbody').find('tr').toArray();\n    this.table = target.get(0);\n    this.tbody = target.find('tbody').get(0);\n  }\n\n  public initialize(): void {\n    this.filterMenus.forEach(function(filterMenu) {\n      filterMenu.initialize();\n    });\n    this.bindCheckboxes();\n    this.bindSelectAllCheckboxes();\n    this.bindSort();\n    this.bindSearch();\n  }\n\n  private bindCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-menu-item.item').change(function() {\n      let index = $(this).data('index');\n      let value = $(this).val();\n      filterMenus[index].updateSelectAll();\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSelectAllCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-menu-item.select-all').change(function() {\n      let index = $(this).data('index');\n      let value = this.checked;\n      filterMenus[index].selectAllUpdate(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSort(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let sort = this.sort;\n    let table = this.table;\n    let options = this.options;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-sort').click(function() {\n      let $sortElement = $(this).find('span');\n      let column = $sortElement.data('column');\n      let order = $sortElement.attr('class');\n      sort(column, order, table, options);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSearch(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    const handler = function() {\n      let $input = $(this).find('input');\n      let index = $input.data('index');\n      let value = $input.val();\n      filterMenus[index].searchToggle(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    };\n    const debouncedHandler = debounce(handler);\n    this.target.find('.dropdown-filter-search').keyup(debouncedHandler);\n  }\n\n  private updateRowVisibility(filterMenus: Array<FilterMenu>, rows: Array<Element>, ths: Array<Element>, tbody:Element): void {\n    let showRows = rows;\n    let hideRows: Array<Element> = [];\n    let selectedLists = filterMenus.map(function(filterMenu) {\n      return {\n        column: filterMenu.column,\n        selected: new Set(filterMenu.inputs\n          .filter(function(input: HTMLInputElement) {\n            return input.checked\n          }).map(function(input: HTMLInputElement) {\n            return input.value.trim().replace(/ *\\(\\d+\\)$/g,'');\n          }))\n      };\n    });\n    if (rows.length > 100)\n      $(tbody).hide();\n    for (let i=0; i < rows.length; i++) {\n      let tds = rows[i].children;\n      let found : boolean = true\n      for (let j=0; j < selectedLists.length; j++) {\n        let content = (tds[selectedLists[j].column] as HTMLElement).innerText.trim().replace(/ *$/g,'')\n        if (!selectedLists[j].selected.has(content)) {\n          $(rows[i]).hide();\n          found = false\n          break;\n        }\n      }\n      if (found)\n        $(rows[i]).show();\n    }\n    if (rows.length > 100)\n      $(tbody).show();\n  }\n\n  private sort(column: number, order: string, table: Element, options: Options): void {\n    let flip = 1;\n    if (order === options.captions.z_to_a.toLowerCase().split(' ').join('-')) flip = -1;\n    const tbody = table.querySelector('tbody');\n    let stringFound = false;\n    const rows = Array.from(tbody.querySelectorAll('tr'))\n    .map(el => el as HTMLElement)\n    .map(el => {\n      let str = (el.children[column] as HTMLElement).innerText.toLowerCase();\n      let nr = Number(str);\n      if (!stringFound) {\n        if (isNaN(nr)) stringFound = true;\n      }\n      return { el, nr, str };\n    }).sort((a, b) => {\n      if (stringFound) {\n        if (a.str < b.str) return -1 * flip;\n        if (a.str > b.str) return 1 * flip;\n      } else {\n        if (a.nr < b.nr) return -1 * flip;\n        if (a.nr > b.nr) return 1 * flip;\n      }\n      return 0;\n    });\n\n    for (var i = 0; i < rows.length; i++) {\n      tbody.appendChild(rows[i].el);\n    }\n  }\n\n\n}\n","import $ from 'jquery';\nimport { FilterCollection } from './FilterCollection'\n\n// Define the plugin function on the jQuery extension point.\n($.fn as any).excelTableFilter = function (this: JQuery, options: Options) {\n  let target = this;\n  // Merge the global options with the per-call options.\n  options = $.extend({}, ($.fn as any).excelTableFilter.options, options);\n\n  if (typeof options.columnSelector === 'undefined') options.columnSelector = '';\n  if (typeof options.sort === 'undefined') options.sort = true;\n  if (typeof options.search === 'undefined') options.search = true;\n\n  if (typeof options.captions === 'undefined') options.captions = {\n    a_to_z: 'A to Z',\n    z_to_a: 'Z to A',\n    search: 'Search',\n    select_all: 'Select All'\n  }\n\n  let filterCollection = new FilterCollection(target, options);\n  filterCollection.initialize();\n\n  // Return the jQuery object for chaining.\n  return target;\n};\n\n// Define the plugin's global default options.\n($.fn as any).excelTableFilter.options = {};\n"]}
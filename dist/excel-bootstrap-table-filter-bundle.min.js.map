{"version":3,"sources":["../src/Debounce.ts","../src/FilterMenu.ts","../src/FilterCollection.ts","../src/excel-bootstrap-table-filter.ts"],"names":["fn","ms","timeoutId","args","setTimeout","apply","_this","target","th","column","index","options","filterCollection","menu","this","dropdownFilterDropdown","appendChild","$trigger","$","children","$content","$menu","updateContent","newEl","oldEl","replaceChild","bind","debounced","debounce","eventHandler","refresh","addEventListener","autoUpdate","getTds","forEach","el","click","toggle","document","is","has","length","hide","find","toArray","map","e","value","selectAllCheckbox","HTMLInputElement","checked","toggleAll","inputs","filter","input","toLowerCase","indexOf","searchFilter","val","i","td","self","innerText","dropdownFilterItem","createElement","className","type","trim","replace","setAttribute","toString","innerHTML","captions","select_all","dropdownFilterItemSelectAll","search","direction","span","split","join","dropdownFilterContent","classList","add","stringFound","count","innerDivs","reduce","arr","elt","undefined","elc","cloneNode","push","v","String","str","nr","Number","isNaN","sort","a","b","_this2","div","firstElementChild","selectAllCheckboxDiv","unshift","searchFilterDiv","dropdownFilterSearch","outerDiv","innerDiv","elements","concat","dropdownFilterSort","a_to_z","z_to_a","html","arrow","icon","hasClass","remove","ths","columnSelector","filterMenus","FilterMenu","rows","table","get","tbody","filterMenu","initialize","bindAutoUpdate","bindCheckboxes","bindSelectAllCheckboxes","bindSort","bindSearch","removeClass","observer","MutationObserver","mut","targets","Symbol","iterator","_step","_iteratorNormalCompletion","_iterator","next","done","m","nodeName","parentNode","event","CustomEvent","t","dispatchEvent","config","attributes","childList","subtree","characterData","observe","querySelector","updateRowVisibility","change","data","updateSelectAll","selectAllUpdate","$sortElement","order","attr","handler","$input","searchToggle","debouncedHandler","keyup","showRows","hideRows","selectedLists","Set","tds","found","j","content","selected","show","flip","Array","from","querySelectorAll","excelTableFilter","extend","FilterCollection","excelTableFilterRefresh","refreshEvent","selector","dispatchFn","each"],"mappings":"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","file":"dist/excel-bootstrap-table-filter-bundle.min.js","sourcesContent":["export default function debounce(fn: Function, ms = 600): Function {\n    let timeoutId: number;\n    return function (this: any, ...args: any[]) {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => fn.apply(this, args), ms);\n    };\n}","import { FilterCollection } from './FilterCollection'\nimport debounce from './Debounce'\n\nexport class FilterMenu {\n\n  th:                 Element;\n  column:             number;\n  index:              number;\n  menu:               HTMLElement;\n  inputs:             Array<Element>;\n  selectAllCheckbox:  Element;\n  searchFilter:       Element;\n  options:            Options;\n  target:             JQuery;\n  filterCollection:   FilterCollection;\n\n  constructor (target: JQuery, th: Element, column: number, index: number, options: Options, filterCollection: FilterCollection) {\n    this.options = options;\n    this.th = th;\n    this.column = column;\n    this.index = index;\n    this.filterCollection = filterCollection;\n    this.target = target;\n  }\n\n  public initialize(): void {\n    this.menu = this.dropdownFilterDropdown();\n    this.th.appendChild(this.menu);\n\n    // variables for click handlers\n    let $trigger = $(this.menu.children[0]);\n    let $content = $(this.menu.children[1]);\n    let $menu = $(this.menu);\n\n    const updateContent = () => {\n      const newEl = this.dropdownFilterDropdown().children[1];\n      const oldEl = this.menu.children[1];\n      this.menu.replaceChild(newEl, oldEl);\n      $content = $(this.menu.children[1]);\n      this.filterCollection.bind();\n    };\n    const debounced = debounce(updateContent, 50);\n    const eventHandler = ()=>{\n      debounced();\n    };\n\n    const refresh = \"refresh\";\n    this.th.addEventListener(refresh, eventHandler);\n    if(this.options.autoUpdate) {\n      this.getTds().forEach(el => el.addEventListener(refresh, eventHandler));\n    }\n    \n    // toggle hide/show when the trigger is clicked\n    $trigger.click(() => $content.toggle());\n\n    $(document).click(function(el) {\n      // hide the content if the user clicks outside of the menu\n      if (!$menu.is(el.target) && $menu.has(el.target).length === 0) {\n        $content.hide();\n      }\n    });\n  }\n\n  public getTds(): Array<HTMLElement> {\n    return this.target.find('tbody tr td:nth-child(' + (this.column + 1) + ')').toArray().map(e => e as HTMLElement);\n  }\n\n  public searchToggle(value: string): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = false;\n    if (value.length === 0){\n      this.toggleAll(true);\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = true;\n      return;\n    }\n    // deselect all checkboxes initially\n    this.toggleAll(false);\n    // select checkboxes that match the search parameter\n    this.inputs.filter(function(input: HTMLInputElement) {\n      return input.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\n    }).forEach(function(input: HTMLInputElement) {\n      input.checked = true;\n    });\n  }\n\n\n  public updateSelectAll(): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) {\n      // clear search parameters, if any\n      $(this.searchFilter).val('');\n      // Check if all inputs are selected\n      this.selectAllCheckbox.checked = (this.inputs.length === this.inputs.filter(function(input: HTMLInputElement) {\n        return input.checked;\n      }).length);\n    }\n  }\n\n  public selectAllUpdate(checked: boolean): void {\n    // clear search parameters, if any\n    $(this.searchFilter).val('');\n    this.toggleAll(checked);\n  }\n\n  private toggleAll(checked: boolean): void {\n    // loop through all inputs and check or uncheck each\n    for (var i=0; i < this.inputs.length; i++) {\n      let input = this.inputs[i];\n      if (input instanceof HTMLInputElement) input.checked = checked;\n    }\n  }\n\n  private dropdownFilterItem(td: HTMLElement, self: any): HTMLElement {\n    // build holder div\n    let value = td.innerText;\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = value.trim().replace(/ *$/g,'');\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item item';\n    // get index of td element\n    input.setAttribute('data-column', self.column.toString());\n    input.setAttribute('data-index', self.index.toString());\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    dropdownFilterItem.innerHTML = dropdownFilterItem.innerHTML.trim() + ' ' +  value;\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterItemSelectAll(): HTMLElement {\n    // build holder div\n    let value = this.options.captions.select_all;\n    let dropdownFilterItemSelectAll = document.createElement('div');\n    dropdownFilterItemSelectAll.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = this.options.captions.select_all;\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item select-all';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    // append input to holding div\n    dropdownFilterItemSelectAll.appendChild(input);\n    dropdownFilterItemSelectAll.innerHTML = dropdownFilterItemSelectAll.innerHTML + ' ' +  value;\n    return dropdownFilterItemSelectAll;\n  }\n\n  private dropdownFilterSearch(): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-search';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'text';\n    input.className = 'dropdown-filter-menu-search form-control';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    input.setAttribute('placeholder', this.options.captions.search);\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterSort(direction: string): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-sort';\n    // build span\n    let span = document.createElement('span');\n    span.className = direction.toLowerCase().split(' ').join('-');\n    span.setAttribute('data-column', this.column.toString());\n    span.setAttribute('data-index', this.index.toString());\n    span.innerText = direction;\n    // append input to holding div\n    dropdownFilterItem.appendChild(span);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterContent(): HTMLElement {\n    let self = this;\n    // build holder div\n    let dropdownFilterContent = document.createElement('div');\n    dropdownFilterContent.classList.add('dropdown-filter-content', 'needs-binding');\n    let stringFound = false;\n    let count : {[element : string] : number} = {};\n    let innerDivs = this.getTds().reduce(function(arr, el: HTMLElement) {\n      // get unique values in column\n      let elt = el.innerText.trim()\n      if (count[elt] === undefined) {\n        let elc = el.cloneNode(true)\n        arr.push(elc);\n        count[elt] = 1\n      } else {\n        count[elt] += 1\n      }\n      // return unique values\n      //console.log(arr)\n      return arr;\n    }, [])\n    .map(function(v) { \n      v.innerText += ' (' + String(count[v.innerText.trim()]) + ')'; \n      const str = v.innerText.toLowerCase();\n      const nr = Number(str);\n      if(!stringFound){\n        if(isNaN(nr)) stringFound=true;\n      }\n\n      return {el:v,str,nr}; \n    })\n    .sort(function(a, b) {\n      if (stringFound) {\n        if(a.str < b.str) return -1;\n        if(a.str > b.str) return  1;\n      } else {\n        if(a.nr < b.nr) return -1;\n        if(a.nr > b.nr) return  1;\n      }\n      return 0;\n    })\n    // create dropdown filter items out of each value\n    .map( (td) => {\n      return this.dropdownFilterItem(td.el, self);\n    })\n\n    // map inputs to instance, we will need these later\n    this.inputs = innerDivs.map((div) => div.firstElementChild);\n\n    // add a select all checkbox\n    let selectAllCheckboxDiv = this.dropdownFilterItemSelectAll();\n    // map the select all  checkbox to the instance, we will need it later\n    this.selectAllCheckbox = selectAllCheckboxDiv.firstElementChild;\n    // the checkbox will precede the other inputs\n    innerDivs.unshift(selectAllCheckboxDiv);\n\n    let searchFilterDiv = this.dropdownFilterSearch();\n    this.searchFilter = searchFilterDiv.firstElementChild;\n\n    // create outer div, and place all inner divs within it\n    let outerDiv = innerDivs.reduce(function(outerDiv, innerDiv) {\n      outerDiv.appendChild(innerDiv);\n      return outerDiv;\n    }, document.createElement('div'));\n    outerDiv.className = 'checkbox-container';\n\n    let elements: Array<HTMLElement> = [];\n    if (this.options.sort  ) elements= elements.concat([\n      this.dropdownFilterSort(this.options.captions.a_to_z),\n      this.dropdownFilterSort(this.options.captions.z_to_a)\n      ]);\n    if (this.options.search) elements.push(searchFilterDiv);\n\n    return elements.concat(outerDiv).reduce(function(html, el) {\n        html.appendChild(el);\n        return html;\n    }, dropdownFilterContent);\n  }\n\n  private dropdownFilterDropdown(): HTMLElement {\n    // build holder div\n    let dropdownFilterDropdown = document.createElement('div');\n    dropdownFilterDropdown.className = 'dropdown-filter-dropdown';\n    let arrow = document.createElement('span');\n    arrow.className = 'glyphicon glyphicon-arrow-down dropdown-filter-icon';\n    let icon = document.createElement('i');\n    icon.className = 'arrow-down';\n    arrow.appendChild(icon);\n    dropdownFilterDropdown.appendChild(arrow);\n    const dropdownFilterContent = this.dropdownFilterContent();\n    dropdownFilterDropdown.appendChild(dropdownFilterContent);\n        \n    if ($(this.th).hasClass('no-sort')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-sort').remove();\n    }\n    if ($(this.th).hasClass('no-filter')) {\n      $(dropdownFilterDropdown).find('.checkbox-container').remove();\n    }\n    if ($(this.th).hasClass('no-search')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-search').remove();\n    }\n    return dropdownFilterDropdown;\n  }\n\n}\n","import { FilterMenu } from './FilterMenu'\nimport debounce from './Debounce'\n\nexport class FilterCollection {\n\n  filterMenus:  Array<FilterMenu>;\n  rows:         Array<Element>;\n  ths:          Array<Element>;\n  table:        Element;\n  tbody:        Element;\n  options:      Options;\n  target:       JQuery;\n\n  constructor (target: JQuery, options: Options) {\n    this.target = target;\n    this.options = options;\n    this.ths = target.find('th' + options.columnSelector).toArray()\n    this.filterMenus = this.ths.map((th: HTMLElement, index: number) => {\n      let column = $(th).index();\n      return new FilterMenu(target, th, column, index, options, this);\n    });\n    this.rows = target.find('tbody').find('tr').toArray();\n    this.table = target.get(0);\n    this.tbody = target.find('tbody').get(0);\n  }\n\n  public initialize(): void {\n    this.filterMenus.forEach(function(filterMenu) {\n      filterMenu.initialize();\n    });\n    this.bind();\n    this.bindAutoUpdate();\n  }\n\n  public bind(): void {\n    this.bindCheckboxes();\n    this.bindSelectAllCheckboxes();\n    this.bindSort();\n    this.bindSearch();\n    this.target.find('.needs-binding').removeClass('needs-binding');\n  }\n\n  private bindAutoUpdate(): void {\n    if(!this.options.autoUpdate) return;\n    const observer = new MutationObserver((mut)=>{\n      let targets: Array<Node> = [];\n      for (const m of mut) {\n        if(m.target.nodeName.toLowerCase() === 'td') targets.push(m.target);\n        if(m.target.parentNode && m.target.parentNode.nodeName.toLowerCase() === 'td') targets.push(m.target.parentNode);\n      }\n      const event = new CustomEvent('refresh');\n      targets.forEach(t=>t.dispatchEvent(event));\n    });\n    const config = { attributes: false, childList: true, subtree: true, characterData: true };\n    observer.observe(this.table.querySelector('tbody'), config);\n  }\n\n  private bindCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-menu-item.item').change(function() {\n      let index = $(this).data('index');\n      filterMenus[index].updateSelectAll();\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSelectAllCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-menu-item.select-all').change(function() {\n      let index = $(this).data('index');\n      let value = this.checked;\n      filterMenus[index].selectAllUpdate(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSort(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let sort = this.sort;\n    let table = this.table;\n    let options = this.options;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.needs-binding .dropdown-filter-sort').click(function() {\n      let $sortElement = $(this).find('span');\n      let column = $sortElement.data('column');\n      let order = $sortElement.attr('class');\n      sort(column, order, table, options);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    });\n  }\n\n  private bindSearch(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let tbody = this.tbody;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    const handler = function() {\n      let $input = $(this).find('input');\n      let index = $input.data('index');\n      let value = $input.val();\n      filterMenus[index].searchToggle(value);\n      updateRowVisibility(filterMenus, rows, ths, tbody);\n    };\n    const debouncedHandler = debounce(handler);\n    this.target.find('.needs-binding .dropdown-filter-search').keyup(debouncedHandler);\n  }\n\n  private updateRowVisibility(filterMenus: Array<FilterMenu>, rows: Array<Element>, ths: Array<Element>, tbody:Element): void {\n    let showRows = rows;\n    let hideRows: Array<Element> = [];\n    let selectedLists = filterMenus.map(function(filterMenu) {\n      return {\n        column: filterMenu.column,\n        selected: new Set(filterMenu.inputs\n          .filter(function(input: HTMLInputElement) {\n            return input.checked\n          }).map(function(input: HTMLInputElement) {\n            return input.value.trim().replace(/ *\\(\\d+\\)$/g,'');\n          }))\n      };\n    });\n    if (rows.length > 100)\n      $(tbody).hide();\n    for (let i=0; i < rows.length; i++) {\n      let tds = rows[i].children;\n      let found : boolean = true\n      for (let j=0; j < selectedLists.length; j++) {\n        let content = (tds[selectedLists[j].column] as HTMLElement).innerText.trim().replace(/ *$/g,'')\n        if (!selectedLists[j].selected.has(content)) {\n          $(rows[i]).hide();\n          found = false\n          break;\n        }\n      }\n      if (found)\n        $(rows[i]).show();\n    }\n    if (rows.length > 100)\n      $(tbody).show();\n  }\n\n  private sort(column: number, order: string, table: Element, options: Options): void {\n    let flip = 1;\n    if (order === options.captions.z_to_a.toLowerCase().split(' ').join('-')) flip = -1;\n    const tbody = table.querySelector('tbody');\n    let stringFound = false;\n    const rows = Array.from(tbody.querySelectorAll('tr'))\n    .map(el => el as HTMLElement)\n    .map(el => {\n      let str = (el.children[column] as HTMLElement).innerText.toLowerCase();\n      let nr = Number(str);\n      if (!stringFound) {\n        if (isNaN(nr)) stringFound = true;\n      }\n      return { el, nr, str };\n    }).sort((a, b) => {\n      if (stringFound) {\n        if (a.str < b.str) return -1 * flip;\n        if (a.str > b.str) return 1 * flip;\n      } else {\n        if (a.nr < b.nr) return -1 * flip;\n        if (a.nr > b.nr) return 1 * flip;\n      }\n      return 0;\n    });\n\n    for (var i = 0; i < rows.length; i++) {\n      tbody.appendChild(rows[i].el);\n    }\n  }\n\n\n}\n","import $ from 'jquery';\nimport { FilterCollection } from './FilterCollection'\n\n// Define the plugin function on the jQuery extension point.\n($.fn as any).excelTableFilter = function (this: JQuery, options: Options) : JQuery {\n  let target = this;\n  // Merge the global options with the per-call options.\n  options = $.extend({}, ($.fn as any).excelTableFilter.options, options);\n\n  if (typeof options.columnSelector === 'undefined') options.columnSelector = '';\n  if (typeof options.sort === 'undefined') options.sort = true;\n  if (typeof options.search === 'undefined') options.search = true;\n  if (typeof options.autoUpdate === 'undefined') options.autoUpdate = true;\n\n  if (typeof options.captions === 'undefined') options.captions = {\n    a_to_z: 'A to Z',\n    z_to_a: 'Z to A',\n    search: 'Search',\n    select_all: 'Select All'\n  }\n\n  let filterCollection = new FilterCollection(target, options);\n  filterCollection.initialize();\n  \n  // Return the jQuery object for chaining.\n  return target;\n};\n\n// Define the plugin's global default options.\n($.fn as any).excelTableFilter.options = {};\n\n// Rerenders the table header\n// For one column when used on `td`\n// Every column when used on `table`\n($.fn as any).excelTableFilterRefresh = function(this: JQuery) : JQuery {\n  const refreshEvent = new CustomEvent('refresh');\n  const selector = \"th\";\n  const dispatchFn = (i: number, e: Element): boolean => e.dispatchEvent(refreshEvent);\n  this.find(selector).each(dispatchFn);\n  if (this.has(selector)) this.each(dispatchFn);\n  return this;\n}\n"]}